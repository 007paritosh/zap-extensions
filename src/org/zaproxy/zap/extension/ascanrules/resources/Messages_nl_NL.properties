#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages

ascanrules.desc=Actieve scan regels

ascanrules.bufferoverflow.name=Buffer Overflow
ascanrules.bufferoverflow.desc=Buffer overflow errors are characterized by the overwriting of memory spaces of the background web process, which should have never been modified intentionally or unintentionally. Overwriting values of the IP (Instruction Pointer), BP (Base Pointer) and other registers causes exceptions, segmentation faults, and other process errors to occur. Usually these errors end execution of the application in an unexpected way. 
ascanrules.bufferoverflow.soln=Rewrite the background program using proper return length checking.  This will require a recompile of the background executable.
ascanrules.bufferoverflow.refs=https\://www.owasp.org/index.php/Buffer_overflow_attack
ascanrules.bufferoverflow.other=Potential Buffer Overflow.  The script closed the connection and threw a 500 Internal Server Error


ascanrules.commandinjectionplugin.name=Injecteren van OS bevelen op afstand
ascanrules.commandinjectionplugin.desc=Aanvalsmethode die word gebruikt om onbevoegde uitvoering van operating systems commando's. Deze aanval is mogelijk als een applicatie niet vertrouwde input accepteert om operating system commando's op te bouwen, op een manier die niet veilig is met betrekking op data sanering en/of onjuist aanroepen van externe programma's.
ascanrules.commandinjectionplugin.refs=http\://cwe.mitre.org/data/definitions/78.html\nhttps\://www.owasp.org/index.php/Command_Injection

ascanrules.testscrosssitescriptv2.name=Cross Site Scripting (gespiegeld)
ascanrules.testscrosssitescriptv2.otherinfo.nothtml=Raised with LOW confidence as the Content-Type is not HTML

ascanrules.testpersistentxssattack.name=Cross Site Scripting (Persistent)
ascanrules.testpersistentxssattack.otherinfo=Bron URL\: {0}

ascanrules.testpersistentxssprime.name=Cross Site Scripting (Persistent) - Priem
ascanrules.testpersistentxssprime.misc=Niet beschrikbaar

ascanrules.testpersistentxssspider.name=Cross Site Scripting (Persistent) - Spider
ascanrules.testpersistentxssspider.misc=Niet beschrikbaar

ascanrules.testsqlinjection.name=SQL injectie
ascanrules.testsqlinjection.desc=SQL inject kan mogelijk zijn.
ascanrules.testsqlinjection.soln=Vertrouw geen client kant input, zelf als er client kantvalidatie uitgevoerd wordt.\nIn het algemeen, check het data type van alle data op de server kant.\nAls de applicatie JDBC gebruikt, gebruik dan PreparedStatement of CallableStatement, met parameters aangegeven als '?'\nAls de applicatie ASP gebruikt, gebruik dan ADO commando objecten met een sterke type check en geparametriseerde queries.\nAls de database opgeslagen procedures kan uitvoeren, gebruik ze.
ascanrules.testsqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
ascanrules.testsqlinjection.alert.errorbased.attack=[{0}] veld\: [{1}], waarde[{2}]
ascanrules.testsqlinjection.alert.errorbased.differentiation.attack=Originele waarde\: [{0}]. Veranderde waarde\: [{1}]. Controlewaarde\: [{2}]
ascanrules.testsqlinjection.alert.booleanbased.attack=[{0}] veld\: [{1}], waard [{2}]
ascanrules.testsqlinjection.alert.unionbased.attack=[{0}] veld\: [{1}], waard [{2}]
ascanrules.testsqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] geeft waarschijnlijk een error, gezien de regular expression [{1}] vergeleken met de HTML uitkomst.\nDe kwetsbaarheid was gedetecteerd door het manipuleren van de parameter om zodoende een database fout te veroorzaken, zodat er een een foutbericht word teruggegeven en herkend wordt
ascanrules.testsqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] likely, given UNION-specific error message regular expression [{1}] matched by the HTML results\nThe vulnerability was detected by manipulating the parameter with an SQL ''UNION'' clause to cause a database error message to be returned and recognised
ascanrules.testsqlinjection.alert.expressionbased.extrainfo=The original page results were successfully replicated using the expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.testsqlinjection.alert.orderbybased.extrainfo=The original page results were successfully replicated using the "ORDER BY" expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.testsqlinjection.alert.errorbased.httpstatuscode.extrainfo=Unmodified message gave HTTP status [{0}], modified message gave HTTP status [{1}]
ascanrules.testsqlinjection.alert.errorbased.differentiation.extrainfo=Unmodified message gave HTTP status [{0}], body of length [{1}], modified message gave HTTP status [{2}], body of length [{3}]. A third (non-SQL injection inducing value) gave HTTP status [{4}], body of length [{5}]
ascanrules.testsqlinjection.alert.booleanbased.extrainfo=The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\nThe parameter value being modified was {2}stripped from the HTML output for the purposes of the comparison
ascanrules.testsqlinjection.alert.booleanbased.extrainfo.dataexists=Data was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
ascanrules.testsqlinjection.alert.booleanbased.extrainfo.datanotexists=Data was NOT returned for the original parameter.\nThe vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
ascanrules.testsqlinjection.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds 
ascanrules.testsqlinjection.authbypass.name=SQL Injection - Authentication Bypass
ascanrules.testsqlinjection.authbypass.desc=SQL injection may be possible on a login page, potentially allowing the application's authentication mechanism to be bypassed 

ascanrules.testexternalredirect.name=External Redirect
ascanrules.testexternalredirect.reason.location.header=The response contains a redirect in its Location header which allows an external Url to be set.
ascanrules.testexternalredirect.reason.location.meta=The response contains a redirect in its meta http-equiv tag for 'Location' which allows an external Url to be set.
ascanrules.testexternalredirect.reason.refresh.header=The response contains a redirect in its Refresh header which allows an external Url to be set.
ascanrules.testexternalredirect.reason.refresh.meta=The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.
ascanrules.testexternalredirect.reason.javascript=The response contains a redirect in its JavaScript code which allows an external Url to be set.
ascanrules.testexternalredirect.reason.notfound=Geen reden gevonden voor de redirect...

ascanrules.codeinjectionplugin.name=Server zijde code injectie
ascanrules.codeinjectionplugin.desc=Een code injectie is mogelijk, inclusief aangepaste code, die vervolgens ge\u00ebvalueerd wordt door de scripting engine
ascanrules.codeinjectionplugin.soln=Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side and escape all data received from the client.\n Avoid the use of eval() functions combined with user input data.
ascanrules.codeinjectionplugin.refs=http\://cwe.mitre.org/data/definitions/94.html\nhttps\://www.owasp.org/index.php/Direct_Dynamic_Code_Evaluation_('Eval_Injection')

ascanrules.testdirectorybrowsing.name=Directory Browsing
ascanrules.testdirectorybrowsing.desc=It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files , backup source files etc which be accessed to read sensitive information.
ascanrules.testdirectorybrowsing.soln=Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
ascanrules.testdirectorybrowsing.refs=http\://httpd.apache.org/docs/mod/core.html\#options\nhttp\://alamo.satlug.org/pipermail/satlug/2002-February/000053.html\n

ascanrules.testinjectioncrlf.name=CRLF Injection
ascanrules.testinjectioncrlf.desc=Cookie can be set via CRLF injection.  It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.
ascanrules.testinjectioncrlf.soln=Type check the submitted parameter carefully.  Do not allow CRLF to be injected by filtering CRLF.
ascanrules.testinjectioncrlf.refs=http\://www.watchfire.com/resources/HTTPResponseSplitting.pdf\nhttp\://webappfirewall.com/lib/crlf-injection.txtnull\nhttp\://www.securityfocus.com/bid/9804

ascanrules.testparametertamper.name=Parameter Tampering
ascanrules.testparametertamper.desc=Parameter manipulation caused an error page or Java stack trace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
ascanrules.testparametertamper.soln=Identify the cause of the error and fix it.  Do not trust client side input and enforce a tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.

ascanrules.testpathtraversal.name=Path Traversal

ascanrules.testremotefileinclude.name=Remote File Inclusion

ascanrules.testserversideinclude.name=Server Side Include
ascanrules.testserversideinclude.desc=Certain parameters may cause Server Side Include commands to be executed.  This may allow database connection or arbitrary code to be executed.
ascanrules.testserversideinclude.soln=Do not trust client side input and enforce a tight check in the server side.  Disable server side includes.\n
Refer=to manual to disable Sever Side Include.\n\nUse least privilege to run your web server or application server.\n\nFor Apache, disable the following\:\n\nOptions Indexes FollowSymLinks Includes\n\nAddType application/x-httpd-cgi .cgi\n\nAddType text/x-server-parsed-html .html
ascanrules.testserversideinclude.refs=http\://www.carleton.ca/~dmcfet/html/ssi.html

