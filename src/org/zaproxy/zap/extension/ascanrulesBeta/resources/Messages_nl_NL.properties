#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages

ascanbeta.desc=Actieve Scan Regels - beta

ascanbeta.backupfiledisclosure.name=Backup File Disclosure
ascanbeta.backupfiledisclosure.desc=Een backup van het bestand werd geopenbaard door de webserver
ascanbeta.backupfiledisclosure.soln=Wijzig geen bestanden in situ op de webserver, en zorg ervoor dat onbelangrijke bestanden (inclusief verborgen bestanden) zijn verwijderd van de webserver.
ascanbeta.backupfiledisclosure.evidence=Een backup van [{0}] is te vinden op [{1}]

ascanbeta.crossdomain.name=Cross-Domain Misconfiguration
#the refs cannot be customised for each sub-category (Adobe, Silverlight, etc)
ascanbeta.crossdomain.refs=http\://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html\nhttp\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\nhttp\://msdn.microsoft.com/en-US/library/cc197955%28v\=vs.95%29.aspx\nhttp\://msdn.microsoft.com/en-us/library/cc838250%28v\=vs.95%29.aspx
ascanbeta.crossdomain.adobe.read.name=Cross-Domain Misconfiguration - Adobe - Read
ascanbeta.crossdomain.adobe.send.name=Cross-Domain Misconfiguration - Adobe - Send
ascanbeta.crossdomain.adobe.desc=Flash/Silverlight gebaseerde cross-site request forgery kan mogelijk zijn vanwege een onjuiste configuratie op de webserver. 
ascanbeta.crossdomain.adobe.read.soln=Configureer het crossdomain.xml bestand om de lijst van domein namen die toegestaan zijn om cross-domein read requests te maken naar deze webserver te beperken. Gebruik hiervoor <allow-access-from domain\="example.com">. U moet alleen toegang geven aan "*" (alle domeinnamen) als u er zeker van bent dat deze service geen toegangscontrole-, gepersonaliseerde-, of priv\u00e9-gegevens aanbiedt.
ascanbeta.crossdomain.adobe.read.extrainfo=De webserver staat schadelijke cross-domein requests om data te lezen toe afkomstig van Flash/Silverlight componenten van elk willekeurig derde partij domein naar dit domein. Als het slachtoffer is ingelogd op deze service, dan zullen de schadelijke lees requests worden behandeld met de rechten van het slachtoffer. Daardoor kan data van deze service worden aangetast door een niet-geautoriseerde derde partij website via de web browser van het slachtoffer. Dit komt met name voor als een Cookie gebaseerde sessie implementatie wordt gebruikt. 
ascanbeta.crossdomain.adobe.send.soln=Configureer het crossdomain.xml bestand om de lijst van domein namen die toegestaan zijn om cross-domein requests te maken naar deze webserver te beperken. Gebruik hiervoor <allow-http-request-headers-from domain\="example.com" headers\="Authorization,X-Blahh">. U moet alleen toegang geven aan "*" (alle domeinnamen) als u er zeker van bent dat deze service niet kwetsbaar is voor Cross Site Request Forgery (CSRF) aanvallen.
ascanbeta.crossdomain.adobe.send.extrainfo=De webserver staat schadelijke cross-domein requests toe afkomstig van Flash/Silverlight componenten van elk willekeurig derde partij domein naar dit domein. Als het slachtoffer is ingelogd op deze service, dan zullen de schadelijke requests worden behandeld met de rechten van het slachtoffer. Dit kan leiden tot Cross Site Request Forgery (CSRF) type aanvallen via de web browser van het slachtoffer. Dit komt met name voor als een Cookie gebaseerde sessie implementatie wordt gebruikt. 
ascanbeta.crossdomain.silverlight.name=Cross-Domain Misconfiguration - Silverlight
ascanbeta.crossdomain.silverlight.desc=Op Silverlight gebaseerde cross-site request forgery kan mogelijk zijn vanwege een onjuiste configuratie op de webserver.
ascanbeta.crossdomain.silverlight.soln=Configureer het clientaccesspolicy.xml bestand om de lijst van domein namen die toegestaan zijn om cross-domein requests te maken naar deze webserver te beperken. Gebruik hiervoor <domain uri\="https\://example.com" />. U moet alleen toegang geven aan "*" (alle domeinnamen) als u er zeker van bent dat deze service geen toegangscontrole-, gepersonaliseerde-, of priv\u00e9-gegevens aanbiedt.
ascanbeta.crossdomain.silverlight.extrainfo=De webserver staat schadelijke cross-domein requests toe afkomstig van Silverlight componenten van elk willekeurig derde partij domein naar dit domein. Als het slachtoffer is ingelogd op deze service, dan zullen de schadelijke requests worden behandeld met de rechten van het slachtoffer. Daardoor kan de data van deze service worden aangetast door een niet-geautoriseerde derde partij website via de web browser van het slachtoffer. Ook kan het leiden tot Cross Site Request Forgery (CSRF) type aanvallen. Dit komt met name voor als een Cookie gebaseerde sessie implementatie wordt gebruikt. 

ascanbeta.heartbleed.name=Heartbleed OpenSSL Kwetsbaarheid
ascanbeta.heartbleed.desc=De TLS implementatie in OpenSSL 1.0.1 voor 1.0.1g behandeld Heartbeat Extension pakketten niet goed af waardoor externe aanvallers gevoelige informatie uit het proces geheugen kunnen verkrijgen via speciaal ontworpen pakketten die leiden tot een buffer over-read. Dit kan mogelijk gevoelige informatie openbaren.
ascanbeta.heartbleed.soln=Update naar OpenSSL 1.0.1g of hoger. Geef HTTPS certificaten opnieuw uit. Verander asymmetrische priv\u00e9-, en gedeelde geheime sleutels aangezien deze misschien zijn aangetast zonder dat daar bewijs voor is te vinden op de server logbestanden.
ascanbeta.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
ascanbeta.heartbleed.extrainfo=Deze kwestie is bevestigd door gegevens te ontfutselen van de server, m.b.v. {0}. Dit is zeer waarschijnlijk geen false positive.

ascanbeta.HTTPParamPoll.name=HTTP Parameter Pollution scanner
ascanbeta.HTTPParamPoll.desc=HTTP Parameter Pollution (HPP) aanvallen bestaan uit het injecteren van gecodeerde query scheidingstekens in andere bestaande parameters. Als een web applicatie de user input onjuist schoonmaakt, dan kan een kwaadwillende gebruiker de logica van de applicatie aantasten om zo client-side en server-side aanvallen uit te voeren. Consequenties van HPP aanvallen zijn dat de aanvaller mogelijk hard-coded HTTP parameters kan overschrijven om zo het gedrag van de applicatie te wijzigen, invoer validatie checkpoints kan omzeilen,  en variabelen kan misbruiken die misschien buiten direct bereik liggen.
ascanbeta.HTTPParamPoll.sol=Maak de user input voor parameter scheidingstekens goed schoon
ascanbeta.HTTPParamPoll.alert.attack=HTTP Parameter Pollution
ascanbeta.HTTPParamPoll.extrainfo=http\://www.google.com/search?q\=http+parameter+pollution

ascanbeta.insecurehttpmethod.name=Onveilige HTTP Method
ascanbeta.insecurehttpmethod.detailed.name=Onveilige HTTP Method - {0}
ascanbeta.insecurehttpmethod.desc=De onveilige HTTP method [{0}] is ingeschakeld op de web server voor deze resource. Afhankelijk van de web server configuratie en de onderliggende implementatie verantwoordelijk voor het serveren van de resource kan dit mogelijk misbruikt worden.  De TRACK en TRACE methodes kunnen worden gebruikt door een aanvaller om toegang te verschaffen tot authorisatie tokens/sessie cookies van applicatie gebruikers, zelfs als de sessie cookies zijn beschermd met de ''HttpOnly'' vlag. Voor de aanval om succesvol te zijn moet de applicatie gebruiker een oude web browser gebruiken of een web browser die een Same Origin Policy (SOP) bypass kwetsbaarheid heeft. De ''CONNECT'' methode kan worden gebruikt door een web client om een HTTP tunnel te maken naar derde partij websites of services.
ascanbeta.insecurehttpmethod.trace.exploitable.desc=De onveilige HTTP method [{0}] is ingeschakeld op de web server voor deze resource en kan worden misbruikt. De TRACK en TRACE methodes kunnen worden gebruikt door een aanvaller om toegang te verschaffen tot authorisatie tokens/sessie cookies van applicatie gebruikers, zelfs als de sessie cookies zijn beschermd met de ''HttpOnly'' vlag. Voor de aanval om succesvol te zijn moet de applicatie gebruiker een oude web browser gebruiken of een web browser die een Same Origin Policy (SOP) bypass kwetsbaarheid heeft. 
ascanbeta.insecurehttpmethod.connect.exploitable.desc=De onveilige HTTP method [{0}] is ingeschakeld op de web server voor deze resource en kan worden misbruikt. Het bleek mogelijk te zijn om een getunnelde socket connectie naar een derde partij service aan te maken met deze HTTP methode. Hiermee kan de service worden gebruikt voor een anonieme spam relay, of als een web proxy om netwerk restricties te omzeilen. Het is ook mogelijk om een getunnelde VPN op te zetten waarmee het netwerk omvang te vergroten om zo onbetrouwbare componenten te omvatten.
ascanbeta.insecurehttpmethod.extrainfo=De OPTIONS methode openbaarde de volgende ingeschakelde HTTP methodes voor deze resource\: [{0}]
ascanbeta.insecurehttpmethod.trace.exploitable.extrainfo=Een TRACE request kan worden verstuurd voor deze request met een aangepaste cookiewaarde [{0}]. Deze cookiewaarde kwam terug in de HTTP response. Dit bevestigde de kwetsbaarheid.
ascanbeta.insecurehttpmethod.connect.exploitable.extrainfo=De CONNECT methode werd gebruikt om een socket connectie op te zetten naar [{0}] via de web server.
ascanbeta.insecurehttpmethod.soln=Schakel onveilige methodes, zoals TRACK, TRACE, en CONNECT, uit op de web server en zorg ervoor dat de onderliggende service implementatie deze onveilige methodes niet ondersteunt.

ascanbeta.noanticsrftokens.name=Gebrek aan Anti-CSRF Tokens
ascanbeta.noanticsrftokens.desc=Er zijn geen Anti-CSRF tokens gevonden in een HTML formulier.
ascanbeta.noanticsrftokens.alert.attack=Geen. Alleen Waarschuwing.
ascanbeta.noanticsrftokens.alert.extrainfo=Er zijn geen bekende Anti-CSRF tokens gevonden in de volgende HTML

ascanbeta.remotecodeexecution.cve-2012-1823.name=Remote Code Execution - CVE-2012-1823
ascanbeta.remotecodeexecution.cve-2012-1823.desc=Sommige PHP versies handelen query strings die geen unescaped "\=" teken hebben niet goed af wanneer ze geconfigureerd zijn om CGI te gebruiken. Dit zorgt ervoor dat willekeurige code uitgevoerd kan worden. In dit geval  werd een operating system commando uitgevoerd op de web server en de resultaten daarvan werden terug gestuurd naar de web browser. 
ascanbeta.remotecodeexecution.cve-2012-1823.soln=Upgrade naar de nieuwste stabiele versie van PHP, of gebruik de Apache web server en de mod_rewrite module om schadelijke requests weg te filteren m.b.v. de "RewriteCond" en " RewriteRule" richtlijnen.

ascanbeta.sessionfixation.name=Session Fixation
ascanbeta.sessionfixation.desc=Session Fixation kan mogelijk zijn. Als dit probleem optreedt bij een login URL (waar de gebruiker zichzelf verifieert bij de applicatie), dan kan de URL, samen met een vaste sessie id, gegeven worden door een aanvaller aan het slachtoffer om later de identiteit van het slachtoffer over te nemen d.m.v. het gegeven sessie id. Als dit probleem optreedt bij een niet-login pagina, dan kan de URL en vaste sessie id alleen worden gebruikt door de aanvaller om de acties van de niet-geverifieerde gebruiker bij te houden. Als de kwetsbaarheid optreedt bij een cookie veld of een formulier veld (POST parameter) i.p.v. bij een URL (GET) parameter, dan kunnen enkele andere kwetsbaarheden nodig zijn om het cookie veld in te stellen in de browser van het slachtoffer en om de kwetsbaarheid te misbruiken.
ascanbeta.sessionfixation.soln=1) Voorkom dat aanvallers een sessie id bemachtigen door strikte sessie ids af te dwingen en deze alleen uit te delen na geslaagde verificatie in de applicatie.\n2) De server moet altijd een nieuw sessie id maken bij verificatie, ongeacht of er reeds een sessie aanwezig is.\n3) Bindt de sessie id aan een identificeerbaar client attribuut combinatie, zoals IP adres, SSL client certificaat.\n4) Wanneer sessies worden vernietigd moet dit zowel op de server als bij de client worden vernietigd.\n5) Implementeer een logout mechanisme die alle voorgaande sessie van de client vernietigd.\n6) Implementeer absolute sessie timeouts.\n7) Verander van een URL gebaseerde naar een cookie of formulier gebaseerde sessie id implementatie. Deze kunnen alleen misbruikt worden door een aanvaller als er andere kwetsbaarheden aanwezig zijn.
ascanbeta.sessionfixation.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\nhttps\://www.owasp.org/index.php/Session_fixation\nhttp\://www.acros.si/papers/session_fixation.pdf\nhttp\://www.technicalinfo.net/papers/WebBasedSessionManagement.html\nhttps\://www.owasp.org/index.php/Top_10_2010-A9
ascanbeta.sessionfixation.alert.cookie.extrainfo=Cookie ingesteld in response wanneer cookie veld [{0}] is ingesteld op NULL\: [{1}]\nCookie ingesteld in response met geleende (geldige) cookie waarde in request [{1}] \: [{2}]
ascanbeta.sessionfixation.alert.cookie.extrainfo.loginpage=De url waarop het probleem werd ontdekt is gemarkeerd als een login pagina.
ascanbeta.sessionfixation.alert.url.extrainfo=Een waarschijnlijke sessie waarde is verschenen in URLs in de HTML output wanneer URL parameter/pseudo URL parameter [{0}] is ingesteld op NULL\: [{1}]\nWanneer deze ''geleende'' sessie [{1}] wordt gebruikt in een volgende request voor deze URL, wordt er geen nieuwe sessie aangemaakt.
ascanbeta.sessionfixation.alert.url.extrainfo.loginpage=De url waarop het probleem werd ontdekt is gemarkeerd als een login pagina.
ascanbeta.sessionfixation.alert.attack={0} veld\: [{1}]
ascanbeta.sessionfixation.alert.logmessage=Een waarschijnlijke Session Fixation Kwetsbaarheid is gevonden met [{0}] URL [{1}] in {2} veld\: [{3}]
#Exposed Session Id messages
ascanbeta.sessionidexposedinurl.name=Blootgestelde Sessie ID
ascanbeta.sessionidexposedinurl.desc=Een sessie id is blootgesteld in de URL. Door de URL (met sessie id) te delen kan een na\u00efeve  gebruiker mogelijk per ongeluk toegang verlenen tot zijn data. Daarbij komt vertrouwelijkheid, integriteit, en beschikbaarheid in het gevaar. URLs die sessie identifiers bevatten komen ook voor in web browser bladwijzers, web server logs, en proxy server log bestanden. 
ascanbeta.sessionidexposedinurl.soln=Gebruik een veiligere sessie management implementatie, zoals een die gebruikt maakt van sessie cookies. Deze zijn niet gemakkelijk per ongeluk te delen en worden niet weergegeven in server logbestanden of browser bladwijzers.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexposedinurl.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management
ascanbeta.sessionidexposedinurl.alert.extrainfo={0} veld [{1}] bevat een blootgestelde sessie identifier [{2}]
ascanbeta.sessionidexposedinurl.alert.extrainfo.loginpage=De url waarop het probleem werd ontdekt is gemarkeerd als een login pagina.
ascanbeta.sessionidexposedinurl.alert.attack={0} veld\: [{1}]
ascanbeta.sessionidexposedinurl.alert.logmessage=Een blootgestelde sessie id is gevonden op [{0}] URL [{1}] in {2} veld\: [{3}]
#Session Id Cookie not sent securely
ascanbeta.sessionidsentinsecurely.name=Sessie ID Onveilig Verstuurd
ascanbeta.sessionidsentinsecurely.desc=Een sessie id  kan worden verstuurd via een onveilig mechanisme. In het geval van een cookie dat wordt verzonden in de request, gebeurt dit wanneer HTTP wordt gebruikt i.p.v. HTTPS. In het geval van een cookie dat wordt verzonden door de server in een response (wanneer de URL is aangepast door de benoemde parameter veld in te stellen op NULL), dan is de 'secure' vlag niet ingesteld. Hierdoor kan de cookie later worden verstuurd via HTTP i.p.v. HTTPS. Hierdoor kan een passieve luistervink op het netwerkpad toegang krijgen tot de sessie van het slachtoffer.  
ascanbeta.sessionidsentinsecurely.soln=1) Gebruik de nieuwst beschikbare versie van SSL/TLS (voor HTTPS) voor alle pagina's waarbij een sessie id wordt uitgewisseld tussen de browser en de web server.\n2) Sta niet toe dat de communicate naar het niet-beveiligde HTTP protocol wordt geforceerd.\n3) Gebruik de 'secure' vlag wanneer een cookie met een sessie id wordt ingesteld. Dit voorkomt een latere overdracht met een onveilig mechanisme.\n4) Stuur niet-beveiligde HTTP pagina requests door naar de veilige HTTPS pagina.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidsentinsecurely.refs=https\://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\nhttps\://www.owasp.org/index.php/Top_10_2010-A9
ascanbeta.sessionidsentinsecurely.alert.extrainfo=sessie id {0} veld [{1}], waarde [{2}] kan worden verstuurd via een onveilig mechanisme.  
ascanbeta.sessionidsentinsecurely.alert.extrainfo.secureflagnotset=De 'secure' vlag was niet ingesteld voor de sessie cookie die werd geleverd door de server.
ascanbeta.sessionidsentinsecurely.alert.extrainfo.loginpage=De url waarop het probleem werd ontdekt is gemarkeerd als een login pagina.
ascanbeta.sessionidsentinsecurely.alert.attack={0} veld\: [{1}]
ascanbeta.sessionidsentinsecurely.alert.logmessage=Een sessie id in {2} veld\: [{3}] kan worden verstuurd via een onveilig mechanisme op [{0}] URL [{1}]
#Session Id Cookie accessible by JavaScript
ascanbeta.sessionidaccessiblebyjavascript.name=Sessie ID Cookie toegankelijk voor JavaScript
ascanbeta.sessionidaccessiblebyjavascript.desc=Een sessie id cookie die is verstuurd door de server (wanneer de URL is gewijzigd door de genoemde parameter veld in te stellen op NULL) is toegankelijk voor JavaScript bij de client. In combinatie met een andere kwetsbaarheid kan het mogelijk zijn om de sessie te kapen. 
ascanbeta.sessionidaccessiblebyjavascript.soln=1) Gebruik de 'httponly' vlag bij het instellen van een cookie die een sessie id bevat. Dit voorkomt dat de cookie toegankelijk is voor JavaScript in de web browser. 
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidaccessiblebyjavascript.refs=
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo=sessie id {0} veld [{1}], waarde [{2}] kan toegankelijk zijn voor JavaScript in de web browser
ascanbeta.sessionidaccessiblebyjavascript.alert.extrainfo.loginpage=De url waarop het probleem werd ontdekt is gemarkeerd als een login pagina.
ascanbeta.sessionidaccessiblebyjavascript.alert.attack={0} veld\: [{1}]
ascanbeta.sessionidaccessiblebyjavascript.alert.logmessage=Een sessie id op [{0}] URL [{1}] {2} veld\: [{3}] kan toegankelijk zijn voor JavaScript  
#Session Id Cookie Expiry
ascanbeta.sessionidexpiry.name=Sessie ID verstrijkingstijd/Max-Age is overmatig
ascanbeta.sessionidexpiry.desc=Een Sessie Id cookie die is verstuurd door de server (wanneer de URL is gewijzigd door de benoemde parameter veld in te stellen op NULL) is ingesteld om geldig te blijven voor een overdreven lange periode. Dit kan worden misbruikt door een aanvaller als de gebruiker vergeet uit te loggen, als de uitlog functionaliteit de sessie onjuist vernietigd, of als de sessie id is aangetast op een andere manier.     
ascanbeta.sessionidexpiry.soln=1) Gebruik de 'Expire' of 'Max-Age' cookie richtlijnen wanneer een cookie dat een sessie id bevat wordt ingesteld. Zo wordt voorkomen dat de cookie voor een te lange tijd beschikbaar blijft.\n2) Zorg ervoor dat een uitlog functionaliteit bestaat en dat deze de sessie op een juiste manier vernietigd.\n3) Gebruik andere preventieve manieren om er zeker van te zijn dat als een sessie id is aangetast, deze niet kan worden misbruikt.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
ascanbeta.sessionidexpiry.refs=
ascanbeta.sessionidexpiry.alert.extrainfo=sessie id {0} veld [{1}], waarde [{2}] kan toegankelijk zijn tot [{3}] (aangezien cookie is ontvangen op {4}), tenzij de sessie is vernietigd.
ascanbeta.sessionidexpiry.alert.extrainfo.loginpage=De url waarop het probleem werd ontdekt is gemarkeerd als een login pagina.
ascanbeta.sessionidexpiry.alert.attack={0} veld\: [{1}]
ascanbeta.sessionidexpiry.alert.logmessage=Een sessie id op [{0}] URL [{1}] {2} veld\: [{3}] kan toegankelijk zijn tot [{4}], tenzij de sessie is vernietigd.
ascanbeta.sessionidexpiry.browserclose=browser sluiten
ascanbeta.sessionidexpiry.timemorethanoneweek=Meer dan een week
ascanbeta.sessionidexpiry.timemorethanoneday=Meer dan een dag
ascanbeta.sessionidexpiry.timemorethanonehour=Meer dan een uur
ascanbeta.sessionidexpiry.timelessthanonehour=Minder dan een uur
ascanbeta.sessionidexpiry.timeexpired=Verlopen

ascanbeta.shellshock.name=Remote Code Execution - Shell Shock
ascanbeta.shellshock.desc=De server draait een versie van de Bash shell waarmee externe aanvallers willekeurige code kunnen uitvoeren 
ascanbeta.shellshock.extrainfo=From CVE-2014-6271\: GNU Bash through 4.3 processes trailing strings after function definitions in the values of environment variables, which allows remote attackers to execute arbitrary code via a crafted environment, as demonstrated by vectors involving the ForceCommand feature in OpenSSH sshd, the mod_cgi and mod_cgid modules in the Apache HTTP Server, scripts executed by unspecified DHCP clients, and other situations in which setting the environment occurs across a privilege boundary from Bash execution, aka "ShellShock." NOTE\: the original fix for this issue was incorrect; CVE-2014-7169 has been assigned to cover the vulnerability that is still present after the incorrect fix.
ascanbeta.shellshock.soln=Update Bash op de server naar de nieuwste versie
ascanbeta.shellshock.ref=http\://web.nvd.nist.gov/view/vuln/detail?vulnId\=CVE-2014-6271\nhttp\://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html
ascanbeta.shellshock.timingbased.evidence=M.b.v. de aanval is een vertraging van [{0}] milliseconden ge\u00efnduceerd en gedetecteerd

ascanbeta.sqlinjection.mysql.name=SQL Injection - MySQL
ascanbeta.sqlinjection.hypersonic.name=SQL Injection - Hypersonic SQL
ascanbeta.sqlinjection.oracle.name=SQL Injection - Oracle
ascanbeta.sqlinjection.postgres.name=SQL Injection - PostgreSQL
ascanbeta.sqlinjection.desc=SQL injection kan mogelijk zijn
ascanbeta.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place. \nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the privilege of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
ascanbeta.sqlinjection.refs=https\://www.owasp.org/index.php/Top_10_2010-A1\nhttps\://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
#ascanbeta.sqlinjection.alert.errorbased.attack={1}
ascanbeta.sqlinjection.alert.errorbased.differentiation.attack=Original Value\: [{0}]. Modified Value\: [{1}]. Control Value\: [{2}]
ascanbeta.sqlinjection.alert.booleanbased.attack=field\: [{0}], value [{1}]
ascanbeta.sqlinjection.alert.unionbased.attack=[{0}] field\: [{1}], value [{2}]
ascanbeta.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] likely, given error message fragment [{1}] in HTML results
ascanbeta.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] likely, given UNION-specific message fragment [{1}] in HTML results
ascanbeta.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Unmodified message gave HTTP status [{0}], modified message gave HTTP status [{1}]
ascanbeta.sqlinjection.alert.errorbased.differentiation.extrainfo=Unmodified message gave HTTP status [{0}], body of length [{1}], modified message gave HTTP status [{2}], body of length [{3}]. A third (non-SQL injection inducing value) gave HTTP status [{4}], body of length [{5}]
ascanbeta.sqlinjection.alert.booleanbased.extrainfo=The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]
ascanbeta.sqlinjection.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds 

ascanbeta.sourcecodedisclosure.desc=The source code for the current page was disclosed by the web server

ascanbeta.sourcecodedisclosurecve-2012-1823.name=Source Code Disclosure - CVE-2012-1823
ascanbeta.sourcecodedisclosurecve-2012-1823.desc=Some PHP versions, when configured to run using CGI, do not correctly handle query strings that lack an unescaped "\=" character, enabling PHP source code disclosure, and arbitrary code execution. In this case, the contents of the PHP file were served directly to the web browser. This output will typically contain PHP, although it may also contain straight HTML.
ascanbeta.sourcecodedisclosurecve-2012-1823.soln=Upgrade naar de nieuwste stabiele versie van PHP, of gebruik de Apache web server en de mod_rewrite module om schadelijke requests weg te filteren m.b.v. de "RewriteCond" en " RewriteRule" richtlijnen.

ascanbeta.sourcecodedisclosure.svnbased.name=Source Code Disclosure - SVN
ascanbeta.sourcecodedisclosure.svnbased.soln=Ensure that SVN metadata files are not deployed to the web server or application server
ascanbeta.sourcecodedisclosure.svnbased.extrainfo=The source code for [{0}] was found at [{1}]

ascanbeta.sourcecodedisclosurewebinf.name=Source Code Disclosure - /WEB-INF folder
ascanbeta.sourcecodedisclosurewebinf.desc=Java source code was disclosed by the web server in Java class files in the WEB-INF folder. The class files can be dis-assembled to produce source code which very closely matches the original source code.  
ascanbeta.sourcecodedisclosurewebinf.soln=The web server should be configured to not serve the /WEB-INF folder or its contents to web browsers, since it contains sensitive information such as compiled Java source code and properties files which may contain credentials. Java classes deployed with the application should be obfuscated, as an additional layer of defence in a "defence-in-depth" approach.

ascanbeta.sourcecodedisclosurewebinf.propertiesfile.name=Properties File Disclosure - /WEB-INF folder
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.desc=A Java class in the /WEB-INF folder disclosed the presence of the properties file. Properties file are not intended to be publicly accessible, and typically contain configuration information, application credentials, or cryptographic keys.   
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.soln=The web server should be configured to not serve the /WEB-INF folder or its contents to web browsers.  It may also be possible to remove the /WEB-INF folder.  
ascanbeta.sourcecodedisclosurewebinf.propertiesfile.extrainfo=The reference to the properties file was found in the dis-assembled Java source code for Java class [{0}].

ascanbeta.usernameenumeration.name=Possible Username Enumeration
ascanbeta.usernameenumeration.desc=It may be possible to enumerate usernames, based on differing HTTP responses when valid and invalid usernames are provided. This would greatly increase the probability of success of password brute-forcing attacks against the system. Note that false positives may sometimes be minimised by increasing the 'Attack Strength' Option in ZAP.  Please manually check the 'Other Info' field to confirm if this is actually an issue. 
ascanbeta.usernameenumeration.soln=Do not divulge details of whether a username is valid or invalid. In particular, for unsuccessful login attempts, do not differentiate between an invalid user and an invalid password in the error message, page title, page contents, HTTP headers, or redirection logic.
ascanbeta.usernameenumeration.refs=https\://www.owasp.org/index.php/Testing_for_user_enumeration_%28OWASP-AT-002%29\nhttp\://sebastian-schinzel.de/_download/ifip-sec2011.pdf
ascanbeta.usernameenumeration.alert.extrainfo=[{0}] parameter [{1}] leaks information on whether a user exists. The [{5}] differences in output, for the valid original username value [{2}], and invalid username value [{3}] are\:\n[{4}]
ascanbeta.usernameenumeration.alert.attack=Manipulate [{0}] field\: [{1}] and monitor the output 

ascanbeta.paddingoracle.name=Generic Padding Oracle
ascanbeta.paddingoracle.desc=By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This plugin should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
ascanbeta.paddingoracle.soln=Update the affected server software, or modify the scripts so that they properly validate encrypted data before attempting decryption.
ascanbeta.paddingoracle.refs=http\://netifera.com/research/\nhttp\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx\nhttp\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle\nhttps\://bugzilla.redhat.com/show_bug.cgi?id\=623799

ascanbeta.elinjection.name=Expression Language Injection
ascanbeta.elinjection.desc=The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.
ascanbeta.elinjection.soln=Perform data validation best practice against untrusted input and to ensure that output encoding is applied when data arrives on the EL layer, so that no metacharacter is found by the interpreter within the user content before evaluation. The most obvious patterns to detect include ${ and \#{, but it may be possible to encode or fragment this data.
ascanbeta.elinjection.refs=https\://www.owasp.org/index.php/Expression_Language_Injection\nhttp\://cwe.mitre.org/data/definitions/917.html

